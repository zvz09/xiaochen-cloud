apiVersion: v1
kind: ConfigMap
metadata:
  namespace: middleware
  name: mysql-config
  labels:
    app: mysql
data:
  my.cnf: |-
    [client]
    default-character-set=utf8mb4
    [mysql]
    default-character-set=utf8mb4
    [mysqld] 
    max_connections = 2000
    secure_file_priv=/var/lib/mysql
    sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql
  namespace: middleware
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: nfs-sc
---
## Service
apiVersion: v1
kind: Service
metadata:
  namespace: middleware
  name: mysql
  labels:
    app: mysql
spec:
  type: NodePort
  ports:
    - name: mysql
      port: 3306
      targetPort: 3306
      nodePort: 30336
  selector:
    app: mysql
---
## Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: middleware
  name: mysql
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0.19
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD    ## 配置Root用户默认密码
              value: "123456"
          resources:
            limits:
              cpu: 2000m
              memory: 512Mi
            requests:
              cpu: 2000m
              memory: 512Mi
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            exec:
              command: ["mysqladmin", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "ping"]
          readinessProbe:
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
            exec:
              command: ["mysqladmin", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "ping"]
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
            - name: config
              mountPath: /etc/mysql/conf.d/my.cnf
              subPath: my.cnf
            - name: localtime
              readOnly: true
              mountPath: /etc/localtime
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mysql
        - name: config
          configMap:
            name: mysql-config
        - name: localtime
          hostPath:
            type: File
            path: /etc/localtime
---
apiVersion: v1
data:
  PREFER_HOST_MODE: 'hostname'
  MODE: 'standalone'
  SPRING_DATASOURCE_PLATFORM: 'mysql'
  MYSQL_SERVICE_HOST: 'mysql'
  MYSQL_SERVICE_PORT: '3306'
  MYSQL_SERVICE_DB_NAME: 'nacos'
  MYSQL_SERVICE_USER: 'nacos'
  MYSQL_SERVICE_PASSWORD: '!QAZ2wsx#EDC'
  MYSQL_SERVICE_DB_PARAM: 'characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&useUnicode=true&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true'
  NACOS_AUTH_ENABLE: 'true'
  NACOS_AUTH_IDENTITY_KEY: '2222'
  NACOS_AUTH_IDENTITY_VALUE: '2xxx'
  NACOS_AUTH_TOKEN: 'SecretKey012345678901234567890123456789012345678901234567890123456789'
kind: ConfigMap
metadata:
  name: nacos
  namespace: middleware
---
## Service
apiVersion: v1
kind: Service
metadata:
  namespace: middleware
  name: nacos
  labels:
    app: nacos
spec:
  type: NodePort
  ports:
    - name: nacos8848
      port: 8848
      targetPort: 8848
      nodePort: 30848
    - name: nacos9848
      port: 9848
      targetPort: 9848
      nodePort: 30948
  selector:
    app: nacos
---
## Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: middleware
  name: nacos
  labels:
    app: nacos
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nacos
  template:
    metadata:
      labels:
        app: nacos
    spec:
      containers:
        - name: nacos
          image: nacos/nacos-server:v2.3.0
          ports:
            - containerPort: 8848
              name: client
            - containerPort: 9848
              name: client-rpc
            - containerPort: 9849
              name: raft-rpc
            - containerPort: 7848
              name: old-raft-rpc
          envFrom:
            - configMapRef:
                name: nacos
          resources:
            limits:
              cpu: 2000m
              memory: 512Mi
            requests:
              cpu: 2000m
              memory: 512Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis
  namespace: middleware
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs-sc
---
## Service
apiVersion: v1
kind: Service
metadata:
  namespace: middleware
  name: redis
  labels:
    app: redis
spec:
  type: NodePort
  ports:
    - name: redis6379
      port: 6379
      targetPort: 6379
  selector:
    app: redis
---
## Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: middleware
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis
          ports:
            - containerPort: 6379
              name: client
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: redis
---
## Service
apiVersion: v1
kind: Service
metadata:
  namespace: middleware
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  type: NodePort
  ports:
    - name: rabbitmq15672
      port: 15672
      targetPort: 15672
    - name: rabbitmq5672
      port: 5672
      targetPort: 5672
  selector:
    app: rabbitmq
---
## Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: middleware
  name: rabbitmq
  labels:
    app: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
        - name: rabbitmq
          image: rabbitmq:management
          ports:
            - containerPort: 5672
              name: client
            - containerPort: 15672
              name: manage
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio
  namespace: middleware
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: nfs-sc
---
## Service
apiVersion: v1
kind: Service
metadata:
  namespace: middleware
  name: minio
  labels:
    app: minio
spec:
  type: NodePort
  ports:
    - name: minio9000
      port: 9000
      targetPort: 9000
    - name: minio9001
      port: 9001
      targetPort: 9001
  selector:
    app: redis
---
## Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: middleware
  name: minio
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - name: minio
          image: bitnami/minio:latest
          ports:
            - containerPort: 9000
              name: client9000
            - containerPort: 9001
              name: client9001
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: minio