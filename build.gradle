//所有buildscript｛｝块都必须出现在脚本中任何插件{}块之前
buildscript { //构建gradle脚本自身需要的资源，可以声明的资源包括依赖项、第三方插件、maven仓库等等

    //统一依赖版本管理
    ext {
        mysqlVersion = "8.0.32"  //mysql
        fastjsonVersion = "2.0.29" //fastjson
        lombokVersion = '1.18.26' //lombok
        springBootVersion = '3.0.2' //springBoot
        springCloudVersion = '2022.0.0' //springCloud
        springCloudAlibabaVersion = '2022.0.0.0'//cloudAlibaba 2022.0.0.0
        mybatisPlusVersion = '3.5.3.1' //mybatisPlus
        redissonVersion = '3.23.3' //redisson
        hutoolVersion = '5.8.16'
        elasticsearchAppenderVersion = '3.0.8'
        druidVersion = '1.2.8'
        knife4jVersion = '4.3.0'
    }

    //buildscript脚本构建时需要去寻找的仓库
    repositories { //从前往后顺序执行，找不到就向后查找
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/grails-core' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/jcenter/' }
        maven { url "https://mvn.getui.com/nexus/content/repositories/releases/" }
        maven {
            url 'http://mirrors.huaweicloud.com/repository/maven/'
            allowInsecureProtocol = true
        }
        mavenCentral()
    }

    //构建用到的插件
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:1.1.0'//maven方式插件
    }

}

//插件要在最上边初始化
plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.3'
}


//针对所有project的配置，包含根项目，除此之外还有subprojects 和 project，感兴趣的童鞋可以自行百度查阅
allprojects {
    apply plugin: 'java-library'
    apply plugin: 'idea'    //项目是idea项目
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management' //类似于maven的版本管理方式
    group = 'com.zvz09'
    version = '0.0.1-SNAPSHOT'
    //jdk版本
    sourceCompatibility = '17'
    targetCompatibility = '17'

    //必须在插入 java插件后 执行该命令
    configurations {
        compileJava {
            extendsFrom annotationProcessor
        }
    }

    //所有project项目的 jar获取方式
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.deprecation = true
    }

    //全局配置时查找依赖的使用
    repositories { //从前往后顺序执行，找不到就向后查找
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/grails-core' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/jcenter/' }
        maven { url "https://mvn.getui.com/nexus/content/repositories/releases/" }
        maven {
            url 'http://mirrors.huaweicloud.com/repository/maven/'
            allowInsecureProtocol = true
        }
        mavenCentral()
    }
}

subprojects {// 子项目配置(可以理解为子模块的全局配置)
    sourceCompatibility = '17'
    targetCompatibility = '17'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management' //类似于maven的版本管理方式

    //子model统一jar引入
    dependencies {
        annotationProcessor 'org.projectlombok:lombok' //注释处理器
        implementation 'org.projectlombok:lombok'//引入lombok依赖
    }

    //提供类似 Maven 的依赖管理和排除的 Gradle 插件
    //使用类似于maven的方式（io.spring.dependency-management） 统一版本管理
    //https://docs.spring.io/dependency-management-plugin/docs/current/reference/html/#pom-generation  学习网址
    //DSL 允许您使用:分隔的字符串来声明依赖管理，以配置托管依赖的坐标
    dependencyManagement {
        dependencies {//统一版本管理
            //DSL 允许您使用:分隔的字符串来声明依赖管理，以配置托管依赖的坐标
            dependency "mysql:mysql-connector-java:${mysqlVersion}"
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"
            dependency "com.baomidou:mybatis-plus-generator:${mybatisPlusVersion}"
            dependency "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
            dependency "org.redisson:redisson-spring-boot-starter:${redissonVersion}"
            dependency "cn.hutool:hutool-all:${hutoolVersion}"
            dependency "com.agido:logback-elasticsearch-appender:${elasticsearchAppenderVersion}"
            dependency "com.alibaba:druid-spring-boot-starter:${druidVersion}"
            dependency "com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter:${knife4jVersion}"
        }

        imports {
            //引入 spring-cloud统一包管理
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            //引入 spring-cloud-alibaba统一包管理
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            //引入 spring-boot统一包管理
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

}


//禁止根项目一切行为(不影响模块)
//禁用以后执行build的时候不会构建parent项目
tasks.forEach {
    it.enabled = false
}


/**
 * Gradle打标准jar包
 * 根项目需禁用springboot插件，否则会构建失败
 * 光禁用BootJar是不行的，还要启用Jar。
 * GroovyDSL的写法，对KotlinDSL无效
 */
bootJar { enabled = false }

jar { enabled = true }
/**    KotlinDSL写法
 * tasks.bootJar {enabled = false}
 * tasks.jar {enabled = true}
 */


tasks.named('test') {
    useJUnitPlatform()
}
